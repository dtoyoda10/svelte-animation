{"remainingRequest":"/Users/matt/Sites/motion/node_modules/babel-loader/lib/index.js??ruleSet[1].rules[0].use[1]!/Users/matt/Sites/motion/node_modules/ts-loader/index.js??ruleSet[1].rules[0].use[2]!/Users/matt/Sites/motion/packages/framer-motion/cypress/integration/drag-svg.ts","dependencies":[{"path":"/Users/matt/Sites/motion/packages/framer-motion/cypress/integration/drag-svg.ts","mtime":1635501741670},{"path":"/Users/matt/Sites/motion/node_modules/@pmmmwh/react-refresh-webpack-plugin/loader/index.js","mtime":1641995460598},{"path":"/Users/matt/Sites/motion/node_modules/cache-loader/dist/cjs.js","mtime":1641995460665},{"path":"/Users/matt/Sites/motion/node_modules/babel-loader/lib/index.js","mtime":1641995460018},{"path":"/Users/matt/Sites/motion/node_modules/ts-loader/index.js","mtime":1641995461506}],"contextDependencies":[],"result":["\"use strict\";\n/**\n * In this test suite there's two sets of each test, one without and one with the `layout` prop.\n * This is because when a component has the layout prop applied, we apply drag to the bounding box\n * and when it isn't, we apply it to the x/y transform.\n *\n * Descrepencies between the expected values in the two sets of tests are *something* to do with how\n * pointer events are being resolved with Cypress, but a manual check will verify that both drag modes\n * are working visually the same.\n */\n\ndescribe(\"Drag SVG\", function () {\n  it(\"Drags the element by the defined distance\", function () {\n    cy.visit(\"?test=drag-svg\").wait(200).get(\"[data-testid='draggable']\").wait(200).trigger(\"pointerdown\", 0, 0, {\n      force: true\n    }).trigger(\"pointermove\", 10, 10, {\n      force: true\n    }) // Gesture will start from first move past threshold\n    .wait(50).trigger(\"pointermove\", 200, 300, {\n      force: true\n    }).wait(50).trigger(\"pointerup\", {\n      force: true\n    }).should(function ($draggable) {\n      var draggable = $draggable[0];\n\n      var _a = draggable.getBoundingClientRect(),\n          left = _a.left,\n          top = _a.top;\n\n      expect(left).to.equal(200);\n      expect(top).to.equal(300);\n    });\n  });\n  it(\"Locks drag to x\", function () {\n    cy.visit(\"?test=drag-svg&axis=x\").get(\"[data-testid='draggable']\").wait(200).trigger(\"pointerdown\", 50, 50, {\n      force: true\n    }).trigger(\"pointermove\", 60, 60, {\n      force: true\n    }) // Gesture will start from first move past threshold\n    .wait(50).trigger(\"pointermove\", 200, 300, {\n      force: true\n    }).wait(50).trigger(\"pointerup\", {\n      force: true\n    }).should(function ($draggable) {\n      var draggable = $draggable[0];\n\n      var _a = draggable.getBoundingClientRect(),\n          left = _a.left,\n          top = _a.top;\n\n      expect(left).to.equal(190);\n      expect(top).to.equal(30);\n    });\n  });\n  it(\"Locks drag to y\", function () {\n    cy.visit(\"?test=drag-svg&axis=y\").get(\"[data-testid='draggable']\").wait(200).trigger(\"pointerdown\", 50, 50, {\n      force: true\n    }).trigger(\"pointermove\", 60, 60, {\n      force: true\n    }) // Gesture will start from first move past threshold\n    .wait(50).trigger(\"pointermove\", 200, 300, {\n      force: true\n    }).wait(50).trigger(\"pointerup\", {\n      force: true\n    }).should(function ($draggable) {\n      var draggable = $draggable[0];\n\n      var _a = draggable.getBoundingClientRect(),\n          left = _a.left,\n          top = _a.top;\n\n      expect(left).to.equal(30);\n      expect(top).to.equal(290);\n    });\n  }); // TODO: Figure out direction lock tests in Cypress\n  // it(\"Direction locks to x\", () => {\n  //     cy.visit(\"?test=drag-svg&lock=true\")\n  //         .wait(200)\n  //         .get(\"[data-testid='draggable']\")\n  //         .trigger(\"pointerdown\", 50, 50, { force: true })\n  //     cy.window()\n  //         .trigger(\"pointermove\", 60, 50, { force: true }) // Gesture will start from first move past threshold\n  //         .wait(100)\n  //         .trigger(\"pointermove\", 200, 0, { force: true })\n  //         .wait(50)\n  //         // .trigger(\"pointermove\", 200, 200, { force: true })\n  //         // .wait(50)\n  //         .trigger(\"pointerup\", { force: true })\n  //     cy.get(\"[data-testid='draggable']\").should(($draggable: any) => {\n  //         const draggable = $draggable[0] as HTMLDivElement\n  //         const { left, top } = draggable.getBoundingClientRect()\n  //         expect(left).to.equal(170)\n  //         expect(top).to.equal(30)\n  //     })\n  // })\n  // it(\"Direction locks to y\", () => {\n  //     cy.visit(\"?test=drag-svg&lock=true\")\n  //         .get(\"[data-testid='draggable']\")\n  //         .wait(200)\n  //         .trigger(\"pointerdown\", 50, 50, { force: true })\n  //         .trigger(\"pointermove\", 50, 60, { force: true }) // Gesture will start from first move past threshold\n  //         .wait(200)\n  //         .trigger(\"pointermove\", 50, 200, { force: true })\n  //         .wait(50)\n  //         .trigger(\"pointermove\", 200, 50, { force: true })\n  //         .wait(50)\n  //         .trigger(\"pointerup\", { force: true })\n  //         .should(($draggable: any) => {\n  //             const draggable = $draggable[0] as HTMLDivElement\n  //             const { left, top } = draggable.getBoundingClientRect()\n  //             expect(left).to.equal(30)\n  //             expect(top).to.equal(270)\n  //         })\n  // })\n\n  it(\"Constraints as object: bottom right\", function () {\n    cy.visit(\"?test=drag-svg&right=100&bottom=100\").wait(200).get(\"[data-testid='draggable']\").trigger(\"pointerdown\", 50, 50, {\n      force: true\n    }).trigger(\"pointermove\", 60, 60, {\n      force: true\n    }) // Gesture will start from first move past threshold\n    .wait(50).trigger(\"pointermove\", 200, 200, {\n      force: true\n    }).wait(50).trigger(\"pointerup\", {\n      force: true\n    }).should(function ($draggable) {\n      var draggable = $draggable[0];\n\n      var _a = draggable.getBoundingClientRect(),\n          left = _a.left,\n          top = _a.top;\n\n      expect(left).to.equal(130);\n      expect(top).to.equal(130);\n    });\n  });\n  it(\"Constraints as object: top left\", function () {\n    cy.visit(\"?test=drag-svg&left=-10&top=-10\").wait(200).get(\"[data-testid='draggable']\").trigger(\"pointerdown\", 50, 50, {\n      force: true\n    }).trigger(\"pointermove\", 60, 60, {\n      force: true\n    }) // Gesture will start from first move past threshold\n    .wait(50).trigger(\"pointermove\", 10, 10, {\n      force: true\n    }).wait(50).trigger(\"pointerup\", {\n      force: true\n    }).should(function ($draggable) {\n      var draggable = $draggable[0];\n\n      var _a = draggable.getBoundingClientRect(),\n          left = _a.left,\n          top = _a.top;\n\n      expect(left).to.equal(20);\n      expect(top).to.equal(20);\n    });\n  });\n});\ndescribe(\"Drag SVG & Layout\", function () {\n  it(\"Drags the element by the defined distance\", function () {\n    cy.visit(\"?test=drag-svg&layout=true\").get(\"[data-testid='draggable']\").wait(50).should(function ($draggable) {\n      var draggable = $draggable[0];\n\n      var _a = draggable.getBoundingClientRect(),\n          left = _a.left,\n          top = _a.top;\n\n      expect(left).to.equal(30);\n      expect(top).to.equal(30);\n    }).wait(50).trigger(\"pointerdown\", 50, 50, {\n      force: true\n    }).trigger(\"pointermove\", 60, 60, {\n      force: true\n    }) // Gesture will start from first move past threshold\n    .wait(50).trigger(\"pointermove\", 200, 300, {\n      force: true\n    }).wait(50).trigger(\"pointerup\", {\n      force: true\n    }).should(function ($draggable) {\n      var draggable = $draggable[0];\n\n      var _a = draggable.getBoundingClientRect(),\n          left = _a.left,\n          top = _a.top;\n\n      expect(left).to.equal(190);\n      expect(top).to.equal(290);\n    });\n  });\n  it(\"Locks drag to x\", function () {\n    cy.visit(\"?test=drag-svg&axis=x&layout=true\").wait(200).get(\"[data-testid='draggable']\").wait(200).trigger(\"pointerdown\", 50, 50, {\n      force: true\n    }).wait(50).trigger(\"pointermove\", 60, 60, {\n      force: true\n    }) // Gesture will start from first move past threshold\n    .wait(50).trigger(\"pointermove\", 200, 300, {\n      force: true\n    }).wait(50).trigger(\"pointerup\", {\n      force: true\n    }).should(function ($draggable) {\n      var draggable = $draggable[0];\n\n      var _a = draggable.getBoundingClientRect(),\n          left = _a.left,\n          top = _a.top;\n\n      expect(left).to.equal(190);\n      expect(top).to.equal(30);\n    });\n  });\n  it(\"Locks drag to y\", function () {\n    cy.visit(\"?test=drag-svg&axis=y&layout=true\").wait(200).get(\"[data-testid='draggable']\").wait(200).trigger(\"pointerdown\", 50, 50, {\n      force: true\n    }).wait(50).trigger(\"pointermove\", 60, 60, {\n      force: true\n    }) // Gesture will start from first move past threshold\n    .wait(50).trigger(\"pointermove\", 200, 300, {\n      force: true\n    }).wait(50).trigger(\"pointerup\", {\n      force: true\n    }).should(function ($draggable) {\n      var draggable = $draggable[0];\n\n      var _a = draggable.getBoundingClientRect(),\n          left = _a.left,\n          top = _a.top;\n\n      expect(left).to.equal(30);\n      expect(top).to.equal(290);\n    });\n  }); // TODO: Figure out direction lock tests in Cypress\n  // it(\"Direction locks to x\", () => {\n  //     cy.visit(\"?test=drag-svg&lock=true\")\n  //         .wait(200)\n  //         .get(\"[data-testid='draggable']\")\n  //         .trigger(\"pointerdown\", 50, 50, { force: true })\n  //     cy.window()\n  //         .trigger(\"pointermove\", 60, 50, { force: true }) // Gesture will start from first move past threshold\n  //         .wait(100)\n  //         .trigger(\"pointermove\", 200, 0, { force: true })\n  //         .wait(50)\n  //         // .trigger(\"pointermove\", 200, 200, { force: true })\n  //         // .wait(50)\n  //         .trigger(\"pointerup\", { force: true })\n  //     cy.get(\"[data-testid='draggable']\").should(($draggable: any) => {\n  //         const draggable = $draggable[0] as HTMLDivElement\n  //         const { left, top } = draggable.getBoundingClientRect()\n  //         expect(left).to.equal(170)\n  //         expect(top).to.equal(30)\n  //     })\n  // })\n  // it(\"Direction locks to y\", () => {\n  //     cy.visit(\"?test=drag-svg&lock=true\")\n  //         .get(\"[data-testid='draggable']\")\n  //         .wait(200)\n  //         .trigger(\"pointerdown\", 50, 50, { force: true })\n  //         .trigger(\"pointermove\", 50, 60, { force: true }) // Gesture will start from first move past threshold\n  //         .wait(200)\n  //         .trigger(\"pointermove\", 50, 200, { force: true })\n  //         .wait(50)\n  //         .trigger(\"pointermove\", 200, 50, { force: true })\n  //         .wait(50)\n  //         .trigger(\"pointerup\", { force: true })\n  //         .should(($draggable: any) => {\n  //             const draggable = $draggable[0] as HTMLDivElement\n  //             const { left, top } = draggable.getBoundingClientRect()\n  //             expect(left).to.equal(30)\n  //             expect(top).to.equal(270)\n  //         })\n  // })\n\n  it(\"Constraints as object: bottom right\", function () {\n    cy.visit(\"?test=drag-svg&right=100&bottom=100&layout=true\").wait(200).get(\"[data-testid='draggable']\").wait(200).trigger(\"pointerdown\", 50, 50, {\n      force: true\n    }).trigger(\"pointermove\", 60, 60, {\n      force: true\n    }) // Gesture will start from first move past threshold\n    .wait(50).trigger(\"pointermove\", 200, 200, {\n      force: true\n    }).wait(50).trigger(\"pointerup\", {\n      force: true\n    }).should(function ($draggable) {\n      var draggable = $draggable[0];\n\n      var _a = draggable.getBoundingClientRect(),\n          left = _a.left,\n          top = _a.top;\n\n      expect(left).to.equal(130);\n      expect(top).to.equal(130);\n    });\n  });\n  it(\"Constraints as object: top left\", function () {\n    cy.visit(\"?test=drag-svg&left=-10&top=-10&layout=true\").wait(200).get(\"[data-testid='draggable']\").wait(200).trigger(\"pointerdown\", 50, 50, {\n      force: true\n    }).trigger(\"pointermove\", 60, 60, {\n      force: true\n    }) // Gesture will start from first move past threshold\n    .wait(50).trigger(\"pointermove\", 10, 10, {\n      force: true\n    }).wait(50).trigger(\"pointerup\", {\n      force: true\n    }).should(function ($draggable) {\n      var draggable = $draggable[0];\n\n      var _a = draggable.getBoundingClientRect(),\n          left = _a.left,\n          top = _a.top;\n\n      expect(left).to.equal(20);\n      expect(top).to.equal(20);\n    });\n  });\n});",{"version":3,"sources":["/Users/matt/Sites/motion/packages/framer-motion/cypress/integration/drag-svg.ts"],"names":["describe","it","cy","visit","wait","get","trigger","force","should","$draggable","draggable","_a","getBoundingClientRect","left","top","expect","to","equal"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * In this test suite there's two sets of each test, one without and one with the `layout` prop.\n * This is because when a component has the layout prop applied, we apply drag to the bounding box\n * and when it isn't, we apply it to the x/y transform.\n *\n * Descrepencies between the expected values in the two sets of tests are *something* to do with how\n * pointer events are being resolved with Cypress, but a manual check will verify that both drag modes\n * are working visually the same.\n */\ndescribe(\"Drag SVG\", function () {\n    it(\"Drags the element by the defined distance\", function () {\n        cy.visit(\"?test=drag-svg\")\n            .wait(200)\n            .get(\"[data-testid='draggable']\")\n            .wait(200)\n            .trigger(\"pointerdown\", 0, 0, { force: true })\n            .trigger(\"pointermove\", 10, 10, { force: true }) // Gesture will start from first move past threshold\n            .wait(50)\n            .trigger(\"pointermove\", 200, 300, { force: true })\n            .wait(50)\n            .trigger(\"pointerup\", { force: true })\n            .should(function ($draggable) {\n            var draggable = $draggable[0];\n            var _a = draggable.getBoundingClientRect(), left = _a.left, top = _a.top;\n            expect(left).to.equal(200);\n            expect(top).to.equal(300);\n        });\n    });\n    it(\"Locks drag to x\", function () {\n        cy.visit(\"?test=drag-svg&axis=x\")\n            .get(\"[data-testid='draggable']\")\n            .wait(200)\n            .trigger(\"pointerdown\", 50, 50, { force: true })\n            .trigger(\"pointermove\", 60, 60, { force: true }) // Gesture will start from first move past threshold\n            .wait(50)\n            .trigger(\"pointermove\", 200, 300, { force: true })\n            .wait(50)\n            .trigger(\"pointerup\", { force: true })\n            .should(function ($draggable) {\n            var draggable = $draggable[0];\n            var _a = draggable.getBoundingClientRect(), left = _a.left, top = _a.top;\n            expect(left).to.equal(190);\n            expect(top).to.equal(30);\n        });\n    });\n    it(\"Locks drag to y\", function () {\n        cy.visit(\"?test=drag-svg&axis=y\")\n            .get(\"[data-testid='draggable']\")\n            .wait(200)\n            .trigger(\"pointerdown\", 50, 50, { force: true })\n            .trigger(\"pointermove\", 60, 60, { force: true }) // Gesture will start from first move past threshold\n            .wait(50)\n            .trigger(\"pointermove\", 200, 300, { force: true })\n            .wait(50)\n            .trigger(\"pointerup\", { force: true })\n            .should(function ($draggable) {\n            var draggable = $draggable[0];\n            var _a = draggable.getBoundingClientRect(), left = _a.left, top = _a.top;\n            expect(left).to.equal(30);\n            expect(top).to.equal(290);\n        });\n    });\n    // TODO: Figure out direction lock tests in Cypress\n    // it(\"Direction locks to x\", () => {\n    //     cy.visit(\"?test=drag-svg&lock=true\")\n    //         .wait(200)\n    //         .get(\"[data-testid='draggable']\")\n    //         .trigger(\"pointerdown\", 50, 50, { force: true })\n    //     cy.window()\n    //         .trigger(\"pointermove\", 60, 50, { force: true }) // Gesture will start from first move past threshold\n    //         .wait(100)\n    //         .trigger(\"pointermove\", 200, 0, { force: true })\n    //         .wait(50)\n    //         // .trigger(\"pointermove\", 200, 200, { force: true })\n    //         // .wait(50)\n    //         .trigger(\"pointerup\", { force: true })\n    //     cy.get(\"[data-testid='draggable']\").should(($draggable: any) => {\n    //         const draggable = $draggable[0] as HTMLDivElement\n    //         const { left, top } = draggable.getBoundingClientRect()\n    //         expect(left).to.equal(170)\n    //         expect(top).to.equal(30)\n    //     })\n    // })\n    // it(\"Direction locks to y\", () => {\n    //     cy.visit(\"?test=drag-svg&lock=true\")\n    //         .get(\"[data-testid='draggable']\")\n    //         .wait(200)\n    //         .trigger(\"pointerdown\", 50, 50, { force: true })\n    //         .trigger(\"pointermove\", 50, 60, { force: true }) // Gesture will start from first move past threshold\n    //         .wait(200)\n    //         .trigger(\"pointermove\", 50, 200, { force: true })\n    //         .wait(50)\n    //         .trigger(\"pointermove\", 200, 50, { force: true })\n    //         .wait(50)\n    //         .trigger(\"pointerup\", { force: true })\n    //         .should(($draggable: any) => {\n    //             const draggable = $draggable[0] as HTMLDivElement\n    //             const { left, top } = draggable.getBoundingClientRect()\n    //             expect(left).to.equal(30)\n    //             expect(top).to.equal(270)\n    //         })\n    // })\n    it(\"Constraints as object: bottom right\", function () {\n        cy.visit(\"?test=drag-svg&right=100&bottom=100\")\n            .wait(200)\n            .get(\"[data-testid='draggable']\")\n            .trigger(\"pointerdown\", 50, 50, { force: true })\n            .trigger(\"pointermove\", 60, 60, { force: true }) // Gesture will start from first move past threshold\n            .wait(50)\n            .trigger(\"pointermove\", 200, 200, { force: true })\n            .wait(50)\n            .trigger(\"pointerup\", { force: true })\n            .should(function ($draggable) {\n            var draggable = $draggable[0];\n            var _a = draggable.getBoundingClientRect(), left = _a.left, top = _a.top;\n            expect(left).to.equal(130);\n            expect(top).to.equal(130);\n        });\n    });\n    it(\"Constraints as object: top left\", function () {\n        cy.visit(\"?test=drag-svg&left=-10&top=-10\")\n            .wait(200)\n            .get(\"[data-testid='draggable']\")\n            .trigger(\"pointerdown\", 50, 50, { force: true })\n            .trigger(\"pointermove\", 60, 60, { force: true }) // Gesture will start from first move past threshold\n            .wait(50)\n            .trigger(\"pointermove\", 10, 10, { force: true })\n            .wait(50)\n            .trigger(\"pointerup\", { force: true })\n            .should(function ($draggable) {\n            var draggable = $draggable[0];\n            var _a = draggable.getBoundingClientRect(), left = _a.left, top = _a.top;\n            expect(left).to.equal(20);\n            expect(top).to.equal(20);\n        });\n    });\n});\ndescribe(\"Drag SVG & Layout\", function () {\n    it(\"Drags the element by the defined distance\", function () {\n        cy.visit(\"?test=drag-svg&layout=true\")\n            .get(\"[data-testid='draggable']\")\n            .wait(50)\n            .should(function ($draggable) {\n            var draggable = $draggable[0];\n            var _a = draggable.getBoundingClientRect(), left = _a.left, top = _a.top;\n            expect(left).to.equal(30);\n            expect(top).to.equal(30);\n        })\n            .wait(50)\n            .trigger(\"pointerdown\", 50, 50, { force: true })\n            .trigger(\"pointermove\", 60, 60, { force: true }) // Gesture will start from first move past threshold\n            .wait(50)\n            .trigger(\"pointermove\", 200, 300, { force: true })\n            .wait(50)\n            .trigger(\"pointerup\", { force: true })\n            .should(function ($draggable) {\n            var draggable = $draggable[0];\n            var _a = draggable.getBoundingClientRect(), left = _a.left, top = _a.top;\n            expect(left).to.equal(190);\n            expect(top).to.equal(290);\n        });\n    });\n    it(\"Locks drag to x\", function () {\n        cy.visit(\"?test=drag-svg&axis=x&layout=true\")\n            .wait(200)\n            .get(\"[data-testid='draggable']\")\n            .wait(200)\n            .trigger(\"pointerdown\", 50, 50, { force: true })\n            .wait(50)\n            .trigger(\"pointermove\", 60, 60, { force: true }) // Gesture will start from first move past threshold\n            .wait(50)\n            .trigger(\"pointermove\", 200, 300, { force: true })\n            .wait(50)\n            .trigger(\"pointerup\", { force: true })\n            .should(function ($draggable) {\n            var draggable = $draggable[0];\n            var _a = draggable.getBoundingClientRect(), left = _a.left, top = _a.top;\n            expect(left).to.equal(190);\n            expect(top).to.equal(30);\n        });\n    });\n    it(\"Locks drag to y\", function () {\n        cy.visit(\"?test=drag-svg&axis=y&layout=true\")\n            .wait(200)\n            .get(\"[data-testid='draggable']\")\n            .wait(200)\n            .trigger(\"pointerdown\", 50, 50, { force: true })\n            .wait(50)\n            .trigger(\"pointermove\", 60, 60, { force: true }) // Gesture will start from first move past threshold\n            .wait(50)\n            .trigger(\"pointermove\", 200, 300, { force: true })\n            .wait(50)\n            .trigger(\"pointerup\", { force: true })\n            .should(function ($draggable) {\n            var draggable = $draggable[0];\n            var _a = draggable.getBoundingClientRect(), left = _a.left, top = _a.top;\n            expect(left).to.equal(30);\n            expect(top).to.equal(290);\n        });\n    });\n    // TODO: Figure out direction lock tests in Cypress\n    // it(\"Direction locks to x\", () => {\n    //     cy.visit(\"?test=drag-svg&lock=true\")\n    //         .wait(200)\n    //         .get(\"[data-testid='draggable']\")\n    //         .trigger(\"pointerdown\", 50, 50, { force: true })\n    //     cy.window()\n    //         .trigger(\"pointermove\", 60, 50, { force: true }) // Gesture will start from first move past threshold\n    //         .wait(100)\n    //         .trigger(\"pointermove\", 200, 0, { force: true })\n    //         .wait(50)\n    //         // .trigger(\"pointermove\", 200, 200, { force: true })\n    //         // .wait(50)\n    //         .trigger(\"pointerup\", { force: true })\n    //     cy.get(\"[data-testid='draggable']\").should(($draggable: any) => {\n    //         const draggable = $draggable[0] as HTMLDivElement\n    //         const { left, top } = draggable.getBoundingClientRect()\n    //         expect(left).to.equal(170)\n    //         expect(top).to.equal(30)\n    //     })\n    // })\n    // it(\"Direction locks to y\", () => {\n    //     cy.visit(\"?test=drag-svg&lock=true\")\n    //         .get(\"[data-testid='draggable']\")\n    //         .wait(200)\n    //         .trigger(\"pointerdown\", 50, 50, { force: true })\n    //         .trigger(\"pointermove\", 50, 60, { force: true }) // Gesture will start from first move past threshold\n    //         .wait(200)\n    //         .trigger(\"pointermove\", 50, 200, { force: true })\n    //         .wait(50)\n    //         .trigger(\"pointermove\", 200, 50, { force: true })\n    //         .wait(50)\n    //         .trigger(\"pointerup\", { force: true })\n    //         .should(($draggable: any) => {\n    //             const draggable = $draggable[0] as HTMLDivElement\n    //             const { left, top } = draggable.getBoundingClientRect()\n    //             expect(left).to.equal(30)\n    //             expect(top).to.equal(270)\n    //         })\n    // })\n    it(\"Constraints as object: bottom right\", function () {\n        cy.visit(\"?test=drag-svg&right=100&bottom=100&layout=true\")\n            .wait(200)\n            .get(\"[data-testid='draggable']\")\n            .wait(200)\n            .trigger(\"pointerdown\", 50, 50, { force: true })\n            .trigger(\"pointermove\", 60, 60, { force: true }) // Gesture will start from first move past threshold\n            .wait(50)\n            .trigger(\"pointermove\", 200, 200, { force: true })\n            .wait(50)\n            .trigger(\"pointerup\", { force: true })\n            .should(function ($draggable) {\n            var draggable = $draggable[0];\n            var _a = draggable.getBoundingClientRect(), left = _a.left, top = _a.top;\n            expect(left).to.equal(130);\n            expect(top).to.equal(130);\n        });\n    });\n    it(\"Constraints as object: top left\", function () {\n        cy.visit(\"?test=drag-svg&left=-10&top=-10&layout=true\")\n            .wait(200)\n            .get(\"[data-testid='draggable']\")\n            .wait(200)\n            .trigger(\"pointerdown\", 50, 50, { force: true })\n            .trigger(\"pointermove\", 60, 60, { force: true }) // Gesture will start from first move past threshold\n            .wait(50)\n            .trigger(\"pointermove\", 10, 10, { force: true })\n            .wait(50)\n            .trigger(\"pointerup\", { force: true })\n            .should(function ($draggable) {\n            var draggable = $draggable[0];\n            var _a = draggable.getBoundingClientRect(), left = _a.left, top = _a.top;\n            expect(left).to.equal(20);\n            expect(top).to.equal(20);\n        });\n    });\n});\n"]}]}