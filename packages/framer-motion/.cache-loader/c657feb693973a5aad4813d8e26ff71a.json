{"remainingRequest":"/Users/matt/Sites/motion/node_modules/babel-loader/lib/index.js??ruleSet[1].rules[0].use[1]!/Users/matt/Sites/motion/node_modules/ts-loader/index.js??ruleSet[1].rules[0].use[2]!/Users/matt/Sites/motion/dev/examples/Animation-height-auto-display-none.tsx","dependencies":[{"path":"/Users/matt/Sites/motion/dev/examples/Animation-height-auto-display-none.tsx","mtime":1642594856248},{"path":"/Users/matt/Sites/motion/node_modules/@pmmmwh/react-refresh-webpack-plugin/loader/index.js","mtime":1641995460598},{"path":"/Users/matt/Sites/motion/node_modules/cache-loader/dist/cjs.js","mtime":1641995460665},{"path":"/Users/matt/Sites/motion/node_modules/babel-loader/lib/index.js","mtime":1641995460018},{"path":"/Users/matt/Sites/motion/node_modules/ts-loader/index.js","mtime":1641995461506}],"contextDependencies":[],"result":["var _s = $RefreshSig$();\n\nimport { __read } from \"tslib\";\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { mix } from \"popmotion\";\n/**\n * This is an example of animating height: auto from a component that was display: none\n *\n * Currently broken\n */\n\nvar Accordion = function (_a) {\n  var i = _a.i,\n      expanded = _a.expanded,\n      setExpanded = _a.setExpanded;\n  var isOpen = i === expanded; // By using `AnimatePresence` to mount and unmount the contents, we can animate\n  // them in and out while also only rendering the contents of open accordions\n\n  return React.createElement(React.Fragment, null, React.createElement(motion.header, {\n    initial: false,\n    animate: {\n      backgroundColor: isOpen ? \"#FF0088\" : \"#0055FF\"\n    },\n    onClick: function () {\n      return setExpanded(isOpen ? false : i);\n    }\n  }), React.createElement(motion.section, {\n    initial: \"collapsed\",\n    animate: isOpen ? \"open\" : \"collapsed\",\n    variants: {\n      open: {\n        display: \"block\",\n        opacity: 1,\n        height: \"auto\"\n      },\n      collapsed: {\n        opacity: 0,\n        height: 0,\n        transitionEnd: {\n          display: \"none\"\n        }\n      }\n    },\n    transition: {\n      duration: 0.8,\n      ease: [0.04, 0.62, 0.23, 0.98]\n    }\n  }, React.createElement(ContentPlaceholder, null)));\n};\n\n_c = Accordion;\nexport var App = function () {\n  _s();\n\n  // This approach is if you only want max one section open at a time. If you want multiple\n  // sections to potentially be open simultaneously, they can all be given their own `useState`.\n  var _a = __read(useState(0), 2),\n      expanded = _a[0],\n      setExpanded = _a[1];\n\n  return React.createElement(\"div\", {\n    className: \"example-container\"\n  }, [0, 1, 2, 3].map(function (i) {\n    return React.createElement(Accordion, {\n      i: i,\n      expanded: expanded,\n      setExpanded: setExpanded\n    });\n  }), React.createElement(\"style\", null, styles));\n};\n\n_s(App, \"rGEI62VsuwnwPY/75ViYiWAYY24=\");\n\n_c2 = App;\nvar styles = \"body {\\n  background-repeat: no-repeat;\\n  padding: 0;\\n  margin: 0;\\n  display: flex;\\n  justify-content: flex-start;\\n  align-items: flex-start;\\n}\\n\\n.example-container {\\n  width: 320px;\\n  padding: 20px;\\n}\\n\\n.content-placeholder {\\n  padding: 20px;\\n  transform-origin: top center;\\n}\\n\\nheader {\\n  background: #0055ff;\\n  border-radius: 10px;\\n  color: white;\\n  cursor: pointer;\\n  height: 40px;\\n  margin-bottom: 20px;\\n}\\n\\n.word {\\n  height: 18px;\\n  border-radius: 10px;\\n  display: inline-block;\\n  margin-bottom: 8px;\\n  margin-right: 8px;\\n  background: #0055ff;\\n  border-radius: 10px;\\n  display: inline-block;\\n}\\n\\n.paragraph {\\n  margin-bottom: 20px;\\n}\\n\\nsection {\\n  overflow: hidden;\\n}\\n\\n@media (max-width: 600px) {\\n  .content-placeholder {\\n    padding-left: 20px;\\n  }\\n\\n  .header .word {\\n    height: 30px;\\n  }\\n\\n  .word {\\n    height: 14px;\\n    margin-bottom: 5px;\\n    margin-right: 5px;\\n  }\\n\\n  .paragraph {\\n    margin-bottom: 20px;\\n  }\\n}\";\n\nvar randomInt = function (min, max) {\n  return Math.round(mix(min, max, Math.random()));\n};\n\nvar generateParagraphLength = function () {\n  return randomInt(5, 20);\n};\n\nvar generateWordLength = function () {\n  return randomInt(20, 100);\n}; // Randomly generate some paragraphs of word lengths\n\n\nvar paragraphs = Array(3).fill(1).map(function () {\n  return Array(generateParagraphLength()).fill(1).map(generateWordLength);\n});\nexport var Word = function (_a) {\n  var width = _a.width;\n  return React.createElement(\"div\", {\n    className: \"word\",\n    style: {\n      width: width\n    }\n  });\n};\n_c3 = Word;\n\nvar Paragraph = function (_a) {\n  var words = _a.words;\n  return React.createElement(\"div\", {\n    className: \"paragraph\"\n  }, words.map(function (width) {\n    return React.createElement(Word, {\n      width: width\n    });\n  }));\n};\n\n_c4 = Paragraph;\nexport var ContentPlaceholder = function () {\n  return React.createElement(motion.div, {\n    variants: {\n      collapsed: {\n        scale: 0.8\n      },\n      open: {\n        scale: 1\n      }\n    },\n    transition: {\n      duration: 0.8\n    },\n    className: \"content-placeholder\"\n  }, paragraphs.map(function (words) {\n    return React.createElement(Paragraph, {\n      words: words\n    });\n  }));\n};\n_c5 = ContentPlaceholder;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Accordion\");\n$RefreshReg$(_c2, \"App\");\n$RefreshReg$(_c3, \"Word\");\n$RefreshReg$(_c4, \"Paragraph\");\n$RefreshReg$(_c5, \"ContentPlaceholder\");",null]}