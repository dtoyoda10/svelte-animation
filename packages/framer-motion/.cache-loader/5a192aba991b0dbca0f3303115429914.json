{"remainingRequest":"/Users/matt/Sites/motion/node_modules/babel-loader/lib/index.js??ruleSet[1].rules[0].use[1]!/Users/matt/Sites/motion/node_modules/ts-loader/index.js??ruleSet[1].rules[0].use[2]!/Users/matt/Sites/motion/dev/examples/Drag-SharedLayout.tsx","dependencies":[{"path":"/Users/matt/Sites/motion/dev/examples/Drag-SharedLayout.tsx","mtime":1642594856250},{"path":"/Users/matt/Sites/motion/node_modules/@pmmmwh/react-refresh-webpack-plugin/loader/index.js","mtime":1641995460598},{"path":"/Users/matt/Sites/motion/node_modules/cache-loader/dist/cjs.js","mtime":1641995460665},{"path":"/Users/matt/Sites/motion/node_modules/babel-loader/lib/index.js","mtime":1641995460018},{"path":"/Users/matt/Sites/motion/node_modules/ts-loader/index.js","mtime":1641995461506}],"contextDependencies":[],"result":["var _s = $RefreshSig$();\n\nimport { __makeTemplateObject, __read } from \"tslib\";\nimport * as React from \"react\";\nimport { useState, useRef } from \"react\";\nimport { motion } from \"framer-motion\";\nimport styled from \"styled-components\";\n/**\n * This is an example of transferring drag status by tagging a component with layoutId\n */\n\nvar Container = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n    width: 100vw;\\n    height: 100vh;\\n    position: absolute;\\n    display: flex;\\n    align-items: stretch;\\n    justify-content: stretch;\\n\"], [\"\\n    width: 100vw;\\n    height: 100vh;\\n    position: absolute;\\n    display: flex;\\n    align-items: stretch;\\n    justify-content: stretch;\\n\"])));\n_c = Container;\nvar Zone = styled.div(templateObject_2 || (templateObject_2 = __makeTemplateObject([\"\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    width: 50%;\\n    height: 100%;\\n\"], [\"\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    width: 50%;\\n    height: 100%;\\n\"])));\n_c2 = Zone;\nvar Shadow = styled(motion.div)(templateObject_3 || (templateObject_3 = __makeTemplateObject([\"\\n    background: rgba(255, 255, 255, 0.5);\\n    width: 100px;\\n    height: 100px;\\n    border-radius: 20px;\\n\"], [\"\\n    background: rgba(255, 255, 255, 0.5);\\n    width: 100px;\\n    height: 100px;\\n    border-radius: 20px;\\n\"])));\n_c3 = Shadow;\nvar Draggable = styled(motion.div)(templateObject_4 || (templateObject_4 = __makeTemplateObject([\"\\n    background: white;\\n    width: 100px;\\n    height: 100px;\\n    border-radius: 20px;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n\"], [\"\\n    background: white;\\n    width: 100px;\\n    height: 100px;\\n    border-radius: 20px;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n\"])));\n_c4 = Draggable;\nvar Dot = styled(motion.div)(templateObject_5 || (templateObject_5 = __makeTemplateObject([\"\\n    background: rgb(255, 0, 136);\\n    width: 20px;\\n    height: 20px;\\n    border-radius: 10px;\\n\"], [\"\\n    background: rgb(255, 0, 136);\\n    width: 20px;\\n    height: 20px;\\n    border-radius: 10px;\\n\"])));\n_c5 = Dot;\n\nfunction Target(_a) {\n  var onProjectionUpdate = _a.onProjectionUpdate;\n  return React.createElement(Shadow, null, React.createElement(Draggable, {\n    drag: true,\n    dragConstraints: {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0\n    },\n    dragElastic: 1,\n    onProjectionUpdate: onProjectionUpdate,\n    layoutId: \"a\"\n  }, React.createElement(Dot, {\n    layoutId: \"dot\"\n  })));\n}\n\n_c6 = Target;\n\nfunction DragDrop() {\n  _s();\n\n  var viewportWidth = useRef(0);\n\n  var _a = __read(useState(true), 2),\n      is = _a[0],\n      setIs = _a[1];\n\n  React.useEffect(function () {\n    viewportWidth.current = window.innerWidth;\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(Zone, null, is && React.createElement(Target, {\n    onProjectionUpdate: function (box) {\n      if (box.x.min > viewportWidth.current / 2 + 100) {\n        setIs(false);\n      }\n    }\n  })), React.createElement(Zone, null, !is && React.createElement(Target, {\n    onProjectionUpdate: function (box) {\n      if (box.x.min < viewportWidth.current / 2 - 100) {\n        setIs(true);\n      }\n    }\n  })));\n}\n\n_s(DragDrop, \"RgUlq8HHH/JX36LJddNLbCIn5W4=\");\n\n_c7 = DragDrop;\nexport var App = function () {\n  return React.createElement(Container, null, React.createElement(DragDrop, null));\n};\n_c8 = App;\nvar templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Zone\");\n$RefreshReg$(_c3, \"Shadow\");\n$RefreshReg$(_c4, \"Draggable\");\n$RefreshReg$(_c5, \"Dot\");\n$RefreshReg$(_c6, \"Target\");\n$RefreshReg$(_c7, \"DragDrop\");\n$RefreshReg$(_c8, \"App\");",null]}