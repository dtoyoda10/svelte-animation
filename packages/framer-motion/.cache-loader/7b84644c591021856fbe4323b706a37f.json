{"remainingRequest":"/Users/matt/Sites/motion/node_modules/babel-loader/lib/index.js??ruleSet[1].rules[0].use[1]!/Users/matt/Sites/motion/node_modules/ts-loader/index.js??ruleSet[1].rules[0].use[2]!/Users/matt/Sites/motion/packages/framer-motion/cypress/integration/layout-relative-drag.ts","dependencies":[{"path":"/Users/matt/Sites/motion/packages/framer-motion/cypress/integration/layout-relative-drag.ts","mtime":1635501741670},{"path":"/Users/matt/Sites/motion/node_modules/@pmmmwh/react-refresh-webpack-plugin/loader/index.js","mtime":1641995460598},{"path":"/Users/matt/Sites/motion/node_modules/cache-loader/dist/cjs.js","mtime":1641995460665},{"path":"/Users/matt/Sites/motion/node_modules/babel-loader/lib/index.js","mtime":1641995460018},{"path":"/Users/matt/Sites/motion/node_modules/ts-loader/index.js","mtime":1641995461506}],"contextDependencies":[],"result":["\"use strict\";\n\nfunction expectBbox(element, expectedBbox) {\n  var bbox = element.getBoundingClientRect();\n  expect(bbox.left).to.equal(expectedBbox.left);\n  expect(bbox.top).to.equal(expectedBbox.top);\n  expect(bbox.width).to.equal(expectedBbox.width);\n  expect(bbox.height).to.equal(expectedBbox.height);\n}\n\nfunction testNestedDrag(query) {\n  cy.visit(\"?test=drag-layout-nested&\".concat(query)).wait(50).get(\"#parent\").should(function (_a) {\n    var $parent = _a[0];\n    expectBbox($parent, {\n      top: 100,\n      left: 200,\n      width: 300,\n      height: 300\n    });\n  }).get(\"#child\").should(function (_a) {\n    var $child = _a[0];\n    expectBbox($child, {\n      top: 150,\n      left: 250,\n      width: 600,\n      height: 200\n    });\n  }).get(\"#parent\").trigger(\"pointerdown\", 5, 5).trigger(\"pointermove\", 10, 10) // Gesture will start from first move past threshold\n  .wait(50).trigger(\"pointermove\", 100, 100, {\n    force: true\n  }).wait(50).trigger(\"pointerup\", {\n    force: true\n  }).should(function (_a) {\n    var $parent = _a[0];\n    expectBbox($parent, {\n      top: 200,\n      left: 300,\n      width: 300,\n      height: 300\n    });\n  }).get(\"#child\").should(function (_a) {\n    var $child = _a[0];\n    expectBbox($child, {\n      top: 250,\n      left: 350,\n      width: 600,\n      height: 200\n    });\n  }).trigger(\"pointerdown\", 5, 5).trigger(\"pointermove\", 10, 10) // Gesture will start from first move past threshold\n  .wait(50).trigger(\"pointermove\", 100, 100, {\n    force: true\n  }).wait(50).trigger(\"pointerup\", {\n    force: true\n  }).should(function (_a) {\n    var $parent = _a[0];\n    expectBbox($parent, {\n      top: 200,\n      left: 300,\n      width: 300,\n      height: 300\n    });\n  }).get(\"#child\").should(function (_a) {\n    var $child = _a[0];\n    expectBbox($child, {\n      top: 350,\n      left: 450,\n      width: 600,\n      height: 200\n    });\n  });\n}\n\ndescribe(\"Relative projection targets: Drag\", function () {\n  it(\"Child correctly follows parent\", function () {\n    cy.visit(\"?test=layout-relative-drag\").wait(50).get(\"#parent\").should(function (_a) {\n      var $parent = _a[0];\n      expectBbox($parent, {\n        top: 0,\n        left: 0,\n        width: 200,\n        height: 200\n      });\n    }).get(\"#child\").should(function (_a) {\n      var $child = _a[0];\n      expectBbox($child, {\n        top: 0,\n        left: 0,\n        width: 100,\n        height: 100\n      });\n    }).get(\"#parent\").trigger(\"pointerdown\", 5, 5, {\n      force: true\n    }).trigger(\"pointermove\", 10, 10, {\n      force: true\n    }).wait(50).trigger(\"pointermove\", 110, 110, {\n      force: true\n    }).get(\"#parent\").should(function (_a) {\n      var $parent = _a[0];\n      expectBbox($parent, {\n        top: 110,\n        left: 110,\n        width: 200,\n        height: 200\n      });\n    }).get(\"#child\").should(function (_a) {\n      var $child = _a[0];\n      expectBbox($child, {\n        top: 110,\n        left: 110,\n        width: 100,\n        height: 100\n      });\n    });\n  });\n});",{"version":3,"sources":["/Users/matt/Sites/motion/packages/framer-motion/cypress/integration/layout-relative-drag.ts"],"names":["expectBbox","element","expectedBbox","bbox","getBoundingClientRect","expect","left","to","equal","top","width","height","testNestedDrag","query","cy","visit","concat","wait","get","should","_a","$parent","$child","trigger","force","describe","it"],"mappings":"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","sourcesContent":["\"use strict\";\nfunction expectBbox(element, expectedBbox) {\n    var bbox = element.getBoundingClientRect();\n    expect(bbox.left).to.equal(expectedBbox.left);\n    expect(bbox.top).to.equal(expectedBbox.top);\n    expect(bbox.width).to.equal(expectedBbox.width);\n    expect(bbox.height).to.equal(expectedBbox.height);\n}\nfunction testNestedDrag(query) {\n    cy.visit(\"?test=drag-layout-nested&\".concat(query))\n        .wait(50)\n        .get(\"#parent\")\n        .should(function (_a) {\n        var $parent = _a[0];\n        expectBbox($parent, {\n            top: 100,\n            left: 200,\n            width: 300,\n            height: 300,\n        });\n    })\n        .get(\"#child\")\n        .should(function (_a) {\n        var $child = _a[0];\n        expectBbox($child, {\n            top: 150,\n            left: 250,\n            width: 600,\n            height: 200,\n        });\n    })\n        .get(\"#parent\")\n        .trigger(\"pointerdown\", 5, 5)\n        .trigger(\"pointermove\", 10, 10) // Gesture will start from first move past threshold\n        .wait(50)\n        .trigger(\"pointermove\", 100, 100, { force: true })\n        .wait(50)\n        .trigger(\"pointerup\", { force: true })\n        .should(function (_a) {\n        var $parent = _a[0];\n        expectBbox($parent, {\n            top: 200,\n            left: 300,\n            width: 300,\n            height: 300,\n        });\n    })\n        .get(\"#child\")\n        .should(function (_a) {\n        var $child = _a[0];\n        expectBbox($child, {\n            top: 250,\n            left: 350,\n            width: 600,\n            height: 200,\n        });\n    })\n        .trigger(\"pointerdown\", 5, 5)\n        .trigger(\"pointermove\", 10, 10) // Gesture will start from first move past threshold\n        .wait(50)\n        .trigger(\"pointermove\", 100, 100, { force: true })\n        .wait(50)\n        .trigger(\"pointerup\", { force: true })\n        .should(function (_a) {\n        var $parent = _a[0];\n        expectBbox($parent, {\n            top: 200,\n            left: 300,\n            width: 300,\n            height: 300,\n        });\n    })\n        .get(\"#child\")\n        .should(function (_a) {\n        var $child = _a[0];\n        expectBbox($child, {\n            top: 350,\n            left: 450,\n            width: 600,\n            height: 200,\n        });\n    });\n}\ndescribe(\"Relative projection targets: Drag\", function () {\n    it(\"Child correctly follows parent\", function () {\n        cy.visit(\"?test=layout-relative-drag\")\n            .wait(50)\n            .get(\"#parent\")\n            .should(function (_a) {\n            var $parent = _a[0];\n            expectBbox($parent, {\n                top: 0,\n                left: 0,\n                width: 200,\n                height: 200,\n            });\n        })\n            .get(\"#child\")\n            .should(function (_a) {\n            var $child = _a[0];\n            expectBbox($child, {\n                top: 0,\n                left: 0,\n                width: 100,\n                height: 100,\n            });\n        })\n            .get(\"#parent\")\n            .trigger(\"pointerdown\", 5, 5, { force: true })\n            .trigger(\"pointermove\", 10, 10, { force: true })\n            .wait(50)\n            .trigger(\"pointermove\", 110, 110, { force: true })\n            .get(\"#parent\")\n            .should(function (_a) {\n            var $parent = _a[0];\n            expectBbox($parent, {\n                top: 110,\n                left: 110,\n                width: 200,\n                height: 200,\n            });\n        })\n            .get(\"#child\")\n            .should(function (_a) {\n            var $child = _a[0];\n            expectBbox($child, {\n                top: 110,\n                left: 110,\n                width: 100,\n                height: 100,\n            });\n        });\n    });\n});\n"]}]}